//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import SideMenu
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `GoogleMapStyle.json`.
    static let googleMapStyleJson = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleMapStyle", pathExtension: "json")
    /// Resource file `GoogleMapStyle.night.json`.
    static let googleMapStyleNightJson = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleMapStyle.night", pathExtension: "json")
    
    /// `bundle.url(forResource: "GoogleMapStyle", withExtension: "json")`
    static func googleMapStyleJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleMapStyleJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "GoogleMapStyle.night", withExtension: "json")`
    static func googleMapStyleNightJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleMapStyleNightJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 86 images.
  struct image {
    /// Image `Launch`.
    static let launch = Rswift.ImageResource(bundle: R.hostingBundle, name: "Launch")
    /// Image `boy-1`.
    static let boy1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "boy-1")
    /// Image `boy-2`.
    static let boy2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "boy-2")
    /// Image `btn-arrow-next-red`.
    static let btnArrowNextRed = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn-arrow-next-red")
    /// Image `btn-arrow-next`.
    static let btnArrowNext = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn-arrow-next")
    /// Image `btn-backspace-outline-red`.
    static let btnBackspaceOutlineRed = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn-backspace-outline-red")
    /// Image `cluster-pin`.
    static let clusterPin = Rswift.ImageResource(bundle: R.hostingBundle, name: "cluster-pin")
    /// Image `girl-1`.
    static let girl1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "girl-1")
    /// Image `girl-2`.
    static let girl2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "girl-2")
    /// Image `how-to-ride-1`.
    static let howToRide1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "how-to-ride-1")
    /// Image `how-to-ride-2`.
    static let howToRide2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "how-to-ride-2")
    /// Image `how-to-ride-3`.
    static let howToRide3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "how-to-ride-3")
    /// Image `how-to-ride-4`.
    static let howToRide4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "how-to-ride-4")
    /// Image `how-to-ride-5`.
    static let howToRide5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "how-to-ride-5")
    /// Image `how-to-ride-6`.
    static let howToRide6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "how-to-ride-6")
    /// Image `how-to-ride-7`.
    static let howToRide7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "how-to-ride-7")
    /// Image `ic-arrow-right-dark-gray-16`.
    static let icArrowRightDarkGray16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-arrow-right-dark-gray-16")
    /// Image `ic-back-dark-gray-16`.
    static let icBackDarkGray16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-back-dark-gray-16")
    /// Image `ic-backspace-dark-gray-16`.
    static let icBackspaceDarkGray16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-backspace-dark-gray-16")
    /// Image `ic-balance-dark-gray-16`.
    static let icBalanceDarkGray16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-balance-dark-gray-16")
    /// Image `ic-battery-empty-dark-gray-24`.
    static let icBatteryEmptyDarkGray24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-battery-empty-dark-gray-24")
    /// Image `ic-battery-empty-dark-gray`.
    static let icBatteryEmptyDarkGray = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-battery-empty-dark-gray")
    /// Image `ic-battery-half-dark-gray-24`.
    static let icBatteryHalfDarkGray24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-battery-half-dark-gray-24")
    /// Image `ic-battery-half-dark-gray`.
    static let icBatteryHalfDarkGray = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-battery-half-dark-gray")
    /// Image `ic-chat-dark-gray-16`.
    static let icChatDarkGray16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-chat-dark-gray-16")
    /// Image `ic-check-dark-gray-16`.
    static let icCheckDarkGray16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-check-dark-gray-16")
    /// Image `ic-clock-dark-gray-16`.
    static let icClockDarkGray16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-clock-dark-gray-16")
    /// Image `ic-clock-dark-gray-20`.
    static let icClockDarkGray20 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-clock-dark-gray-20")
    /// Image `ic-clock-dark-gray-24`.
    static let icClockDarkGray24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-clock-dark-gray-24")
    /// Image `ic-clock-outline-dark-gray-16`.
    static let icClockOutlineDarkGray16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-clock-outline-dark-gray-16")
    /// Image `ic-close-dark-gray-16`.
    static let icCloseDarkGray16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-close-dark-gray-16")
    /// Image `ic-close-white-12`.
    static let icCloseWhite12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-close-white-12")
    /// Image `ic-close-white-16`.
    static let icCloseWhite16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-close-white-16")
    /// Image `ic-credit-card-dark-gray-16`.
    static let icCreditCardDarkGray16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-credit-card-dark-gray-16")
    /// Image `ic-dollar-dark-gray-16`.
    static let icDollarDarkGray16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-dollar-dark-gray-16")
    /// Image `ic-dollar-dark-gray-20`.
    static let icDollarDarkGray20 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-dollar-dark-gray-20")
    /// Image `ic-dollar-dark-gray-24`.
    static let icDollarDarkGray24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-dollar-dark-gray-24")
    /// Image `ic-edit-dark-gray-16`.
    static let icEditDarkGray16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-edit-dark-gray-16")
    /// Image `ic-edit-white-16`.
    static let icEditWhite16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-edit-white-16")
    /// Image `ic-email-dark-gray-16`.
    static let icEmailDarkGray16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-email-dark-gray-16")
    /// Image `ic-enter-code-dark-gray-16`.
    static let icEnterCodeDarkGray16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-enter-code-dark-gray-16")
    /// Image `ic-facebook-dark-gray-16`.
    static let icFacebookDarkGray16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-facebook-dark-gray-16")
    /// Image `ic-help-dark-gray-16`.
    static let icHelpDarkGray16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-help-dark-gray-16")
    /// Image `ic-hide-dark-gray-16`.
    static let icHideDarkGray16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-hide-dark-gray-16")
    /// Image `ic-instagram-dark-gray-16`.
    static let icInstagramDarkGray16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-instagram-dark-gray-16")
    /// Image `ic-location-arrow-dark-gray-16`.
    static let icLocationArrowDarkGray16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-location-arrow-dark-gray-16")
    /// Image `ic-location-dark-gray-16`.
    static let icLocationDarkGray16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-location-dark-gray-16")
    /// Image `ic-location-dark-gray-20`.
    static let icLocationDarkGray20 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-location-dark-gray-20")
    /// Image `ic-location-dark-gray-24`.
    static let icLocationDarkGray24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-location-dark-gray-24")
    /// Image `ic-location-final-dark-gray-16`.
    static let icLocationFinalDarkGray16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-location-final-dark-gray-16")
    /// Image `ic-location-final-red-32`.
    static let icLocationFinalRed32 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-location-final-red-32")
    /// Image `ic-location-red-32`.
    static let icLocationRed32 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-location-red-32")
    /// Image `ic-lock-dark-gray-16`.
    static let icLockDarkGray16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-lock-dark-gray-16")
    /// Image `ic-mastercard--dark-gray-16`.
    static let icMastercardDarkGray16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-mastercard--dark-gray-16")
    /// Image `ic-mobile-dark-gray-16`.
    static let icMobileDarkGray16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-mobile-dark-gray-16")
    /// Image `ic-more-dark-gray-16`.
    static let icMoreDarkGray16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-more-dark-gray-16")
    /// Image `ic-next-dark-gray-16`.
    static let icNextDarkGray16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-next-dark-gray-16")
    /// Image `ic-parking-dark-gray-16`.
    static let icParkingDarkGray16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-parking-dark-gray-16")
    /// Image `ic-payment-history-dark-gray-16`.
    static let icPaymentHistoryDarkGray16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-payment-history-dark-gray-16")
    /// Image `ic-plus-dark-gray-16`.
    static let icPlusDarkGray16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-plus-dark-gray-16")
    /// Image `ic-qr-code-dark-gray-16`.
    static let icQrCodeDarkGray16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-qr-code-dark-gray-16")
    /// Image `ic-rating-dark-gray-16`.
    static let icRatingDarkGray16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-rating-dark-gray-16")
    /// Image `ic-rating-empty-dark-gray-16`.
    static let icRatingEmptyDarkGray16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-rating-empty-dark-gray-16")
    /// Image `ic-rating-empty-red-32`.
    static let icRatingEmptyRed32 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-rating-empty-red-32")
    /// Image `ic-rating-red-32`.
    static let icRatingRed32 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-rating-red-32")
    /// Image `ic-report-issue-dark-gray-16`.
    static let icReportIssueDarkGray16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-report-issue-dark-gray-16")
    /// Image `ic-scooter-dark-gray-16`.
    static let icScooterDarkGray16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-scooter-dark-gray-16")
    /// Image `ic-share-dark-gray-16`.
    static let icShareDarkGray16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-share-dark-gray-16")
    /// Image `ic-show-dark-gray-16`.
    static let icShowDarkGray16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-show-dark-gray-16")
    /// Image `ic-thumbs-down-dark-gray-16`.
    static let icThumbsDownDarkGray16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-thumbs-down-dark-gray-16")
    /// Image `ic-thumbs-up-dark-gray-16`.
    static let icThumbsUpDarkGray16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-thumbs-up-dark-gray-16")
    /// Image `ic-twitter-dark-gray-16`.
    static let icTwitterDarkGray16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-twitter-dark-gray-16")
    /// Image `ic-walking-dark-gray-16`.
    static let icWalkingDarkGray16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-walking-dark-gray-16")
    /// Image `report-issue-menu`.
    static let reportIssueMenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "report-issue-menu")
    /// Image `scooter-enter-code`.
    static let scooterEnterCode = Rswift.ImageResource(bundle: R.hostingBundle, name: "scooter-enter-code")
    /// Image `scooter-model`.
    static let scooterModel = Rswift.ImageResource(bundle: R.hostingBundle, name: "scooter-model")
    /// Image `scooter-pin-green`.
    static let scooterPinGreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "scooter-pin-green")
    /// Image `scooter-pin-locked-green`.
    static let scooterPinLockedGreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "scooter-pin-locked-green")
    /// Image `scooter-pin-red`.
    static let scooterPinRed = Rswift.ImageResource(bundle: R.hostingBundle, name: "scooter-pin-red")
    /// Image `scooter-pin-yellow`.
    static let scooterPinYellow = Rswift.ImageResource(bundle: R.hostingBundle, name: "scooter-pin-yellow")
    /// Image `scooter-qr-code`.
    static let scooterQrCode = Rswift.ImageResource(bundle: R.hostingBundle, name: "scooter-qr-code")
    /// Image `social-facebook-dark-gray-35`.
    static let socialFacebookDarkGray35 = Rswift.ImageResource(bundle: R.hostingBundle, name: "social-facebook-dark-gray-35")
    /// Image `social-instagram-dark-gray-35`.
    static let socialInstagramDarkGray35 = Rswift.ImageResource(bundle: R.hostingBundle, name: "social-instagram-dark-gray-35")
    /// Image `social-twitter-dark-gray-35`.
    static let socialTwitterDarkGray35 = Rswift.ImageResource(bundle: R.hostingBundle, name: "social-twitter-dark-gray-35")
    /// Image `transparent`.
    static let transparent = Rswift.ImageResource(bundle: R.hostingBundle, name: "transparent")
    /// Image `unsafe-parking-popup`.
    static let unsafeParkingPopup = Rswift.ImageResource(bundle: R.hostingBundle, name: "unsafe-parking-popup")
    
    /// `UIImage(named: "Launch", bundle: ..., traitCollection: ...)`
    static func launch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launch, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "boy-1", bundle: ..., traitCollection: ...)`
    static func boy1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.boy1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "boy-2", bundle: ..., traitCollection: ...)`
    static func boy2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.boy2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn-arrow-next", bundle: ..., traitCollection: ...)`
    static func btnArrowNext(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnArrowNext, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn-arrow-next-red", bundle: ..., traitCollection: ...)`
    static func btnArrowNextRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnArrowNextRed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn-backspace-outline-red", bundle: ..., traitCollection: ...)`
    static func btnBackspaceOutlineRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnBackspaceOutlineRed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cluster-pin", bundle: ..., traitCollection: ...)`
    static func clusterPin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clusterPin, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "girl-1", bundle: ..., traitCollection: ...)`
    static func girl1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.girl1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "girl-2", bundle: ..., traitCollection: ...)`
    static func girl2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.girl2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "how-to-ride-1", bundle: ..., traitCollection: ...)`
    static func howToRide1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.howToRide1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "how-to-ride-2", bundle: ..., traitCollection: ...)`
    static func howToRide2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.howToRide2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "how-to-ride-3", bundle: ..., traitCollection: ...)`
    static func howToRide3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.howToRide3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "how-to-ride-4", bundle: ..., traitCollection: ...)`
    static func howToRide4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.howToRide4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "how-to-ride-5", bundle: ..., traitCollection: ...)`
    static func howToRide5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.howToRide5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "how-to-ride-6", bundle: ..., traitCollection: ...)`
    static func howToRide6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.howToRide6, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "how-to-ride-7", bundle: ..., traitCollection: ...)`
    static func howToRide7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.howToRide7, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-arrow-right-dark-gray-16", bundle: ..., traitCollection: ...)`
    static func icArrowRightDarkGray16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icArrowRightDarkGray16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-back-dark-gray-16", bundle: ..., traitCollection: ...)`
    static func icBackDarkGray16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icBackDarkGray16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-backspace-dark-gray-16", bundle: ..., traitCollection: ...)`
    static func icBackspaceDarkGray16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icBackspaceDarkGray16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-balance-dark-gray-16", bundle: ..., traitCollection: ...)`
    static func icBalanceDarkGray16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icBalanceDarkGray16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-battery-empty-dark-gray", bundle: ..., traitCollection: ...)`
    static func icBatteryEmptyDarkGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icBatteryEmptyDarkGray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-battery-empty-dark-gray-24", bundle: ..., traitCollection: ...)`
    static func icBatteryEmptyDarkGray24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icBatteryEmptyDarkGray24, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-battery-half-dark-gray", bundle: ..., traitCollection: ...)`
    static func icBatteryHalfDarkGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icBatteryHalfDarkGray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-battery-half-dark-gray-24", bundle: ..., traitCollection: ...)`
    static func icBatteryHalfDarkGray24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icBatteryHalfDarkGray24, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-chat-dark-gray-16", bundle: ..., traitCollection: ...)`
    static func icChatDarkGray16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icChatDarkGray16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-check-dark-gray-16", bundle: ..., traitCollection: ...)`
    static func icCheckDarkGray16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icCheckDarkGray16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-clock-dark-gray-16", bundle: ..., traitCollection: ...)`
    static func icClockDarkGray16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icClockDarkGray16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-clock-dark-gray-20", bundle: ..., traitCollection: ...)`
    static func icClockDarkGray20(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icClockDarkGray20, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-clock-dark-gray-24", bundle: ..., traitCollection: ...)`
    static func icClockDarkGray24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icClockDarkGray24, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-clock-outline-dark-gray-16", bundle: ..., traitCollection: ...)`
    static func icClockOutlineDarkGray16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icClockOutlineDarkGray16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-close-dark-gray-16", bundle: ..., traitCollection: ...)`
    static func icCloseDarkGray16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icCloseDarkGray16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-close-white-12", bundle: ..., traitCollection: ...)`
    static func icCloseWhite12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icCloseWhite12, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-close-white-16", bundle: ..., traitCollection: ...)`
    static func icCloseWhite16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icCloseWhite16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-credit-card-dark-gray-16", bundle: ..., traitCollection: ...)`
    static func icCreditCardDarkGray16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icCreditCardDarkGray16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-dollar-dark-gray-16", bundle: ..., traitCollection: ...)`
    static func icDollarDarkGray16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icDollarDarkGray16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-dollar-dark-gray-20", bundle: ..., traitCollection: ...)`
    static func icDollarDarkGray20(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icDollarDarkGray20, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-dollar-dark-gray-24", bundle: ..., traitCollection: ...)`
    static func icDollarDarkGray24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icDollarDarkGray24, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-edit-dark-gray-16", bundle: ..., traitCollection: ...)`
    static func icEditDarkGray16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icEditDarkGray16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-edit-white-16", bundle: ..., traitCollection: ...)`
    static func icEditWhite16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icEditWhite16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-email-dark-gray-16", bundle: ..., traitCollection: ...)`
    static func icEmailDarkGray16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icEmailDarkGray16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-enter-code-dark-gray-16", bundle: ..., traitCollection: ...)`
    static func icEnterCodeDarkGray16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icEnterCodeDarkGray16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-facebook-dark-gray-16", bundle: ..., traitCollection: ...)`
    static func icFacebookDarkGray16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icFacebookDarkGray16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-help-dark-gray-16", bundle: ..., traitCollection: ...)`
    static func icHelpDarkGray16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icHelpDarkGray16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-hide-dark-gray-16", bundle: ..., traitCollection: ...)`
    static func icHideDarkGray16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icHideDarkGray16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-instagram-dark-gray-16", bundle: ..., traitCollection: ...)`
    static func icInstagramDarkGray16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icInstagramDarkGray16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-location-arrow-dark-gray-16", bundle: ..., traitCollection: ...)`
    static func icLocationArrowDarkGray16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icLocationArrowDarkGray16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-location-dark-gray-16", bundle: ..., traitCollection: ...)`
    static func icLocationDarkGray16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icLocationDarkGray16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-location-dark-gray-20", bundle: ..., traitCollection: ...)`
    static func icLocationDarkGray20(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icLocationDarkGray20, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-location-dark-gray-24", bundle: ..., traitCollection: ...)`
    static func icLocationDarkGray24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icLocationDarkGray24, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-location-final-dark-gray-16", bundle: ..., traitCollection: ...)`
    static func icLocationFinalDarkGray16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icLocationFinalDarkGray16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-location-final-red-32", bundle: ..., traitCollection: ...)`
    static func icLocationFinalRed32(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icLocationFinalRed32, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-location-red-32", bundle: ..., traitCollection: ...)`
    static func icLocationRed32(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icLocationRed32, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-lock-dark-gray-16", bundle: ..., traitCollection: ...)`
    static func icLockDarkGray16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icLockDarkGray16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-mastercard--dark-gray-16", bundle: ..., traitCollection: ...)`
    static func icMastercardDarkGray16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icMastercardDarkGray16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-mobile-dark-gray-16", bundle: ..., traitCollection: ...)`
    static func icMobileDarkGray16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icMobileDarkGray16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-more-dark-gray-16", bundle: ..., traitCollection: ...)`
    static func icMoreDarkGray16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icMoreDarkGray16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-next-dark-gray-16", bundle: ..., traitCollection: ...)`
    static func icNextDarkGray16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icNextDarkGray16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-parking-dark-gray-16", bundle: ..., traitCollection: ...)`
    static func icParkingDarkGray16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icParkingDarkGray16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-payment-history-dark-gray-16", bundle: ..., traitCollection: ...)`
    static func icPaymentHistoryDarkGray16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icPaymentHistoryDarkGray16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-plus-dark-gray-16", bundle: ..., traitCollection: ...)`
    static func icPlusDarkGray16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icPlusDarkGray16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-qr-code-dark-gray-16", bundle: ..., traitCollection: ...)`
    static func icQrCodeDarkGray16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icQrCodeDarkGray16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-rating-dark-gray-16", bundle: ..., traitCollection: ...)`
    static func icRatingDarkGray16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icRatingDarkGray16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-rating-empty-dark-gray-16", bundle: ..., traitCollection: ...)`
    static func icRatingEmptyDarkGray16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icRatingEmptyDarkGray16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-rating-empty-red-32", bundle: ..., traitCollection: ...)`
    static func icRatingEmptyRed32(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icRatingEmptyRed32, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-rating-red-32", bundle: ..., traitCollection: ...)`
    static func icRatingRed32(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icRatingRed32, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-report-issue-dark-gray-16", bundle: ..., traitCollection: ...)`
    static func icReportIssueDarkGray16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icReportIssueDarkGray16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-scooter-dark-gray-16", bundle: ..., traitCollection: ...)`
    static func icScooterDarkGray16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icScooterDarkGray16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-share-dark-gray-16", bundle: ..., traitCollection: ...)`
    static func icShareDarkGray16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icShareDarkGray16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-show-dark-gray-16", bundle: ..., traitCollection: ...)`
    static func icShowDarkGray16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icShowDarkGray16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-thumbs-down-dark-gray-16", bundle: ..., traitCollection: ...)`
    static func icThumbsDownDarkGray16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icThumbsDownDarkGray16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-thumbs-up-dark-gray-16", bundle: ..., traitCollection: ...)`
    static func icThumbsUpDarkGray16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icThumbsUpDarkGray16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-twitter-dark-gray-16", bundle: ..., traitCollection: ...)`
    static func icTwitterDarkGray16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icTwitterDarkGray16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-walking-dark-gray-16", bundle: ..., traitCollection: ...)`
    static func icWalkingDarkGray16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icWalkingDarkGray16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "report-issue-menu", bundle: ..., traitCollection: ...)`
    static func reportIssueMenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reportIssueMenu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "scooter-enter-code", bundle: ..., traitCollection: ...)`
    static func scooterEnterCode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scooterEnterCode, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "scooter-model", bundle: ..., traitCollection: ...)`
    static func scooterModel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scooterModel, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "scooter-pin-green", bundle: ..., traitCollection: ...)`
    static func scooterPinGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scooterPinGreen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "scooter-pin-locked-green", bundle: ..., traitCollection: ...)`
    static func scooterPinLockedGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scooterPinLockedGreen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "scooter-pin-red", bundle: ..., traitCollection: ...)`
    static func scooterPinRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scooterPinRed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "scooter-pin-yellow", bundle: ..., traitCollection: ...)`
    static func scooterPinYellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scooterPinYellow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "scooter-qr-code", bundle: ..., traitCollection: ...)`
    static func scooterQrCode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scooterQrCode, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "social-facebook-dark-gray-35", bundle: ..., traitCollection: ...)`
    static func socialFacebookDarkGray35(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.socialFacebookDarkGray35, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "social-instagram-dark-gray-35", bundle: ..., traitCollection: ...)`
    static func socialInstagramDarkGray35(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.socialInstagramDarkGray35, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "social-twitter-dark-gray-35", bundle: ..., traitCollection: ...)`
    static func socialTwitterDarkGray35(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.socialTwitterDarkGray35, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "transparent", bundle: ..., traitCollection: ...)`
    static func transparent(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.transparent, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "unsafe-parking-popup", bundle: ..., traitCollection: ...)`
    static func unsafeParkingPopup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unsafeParkingPopup, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 4 nibs.
  struct nib {
    /// Nib `DialogViewController`.
    static let dialogViewController = _R.nib._DialogViewController()
    /// Nib `RidingView`.
    static let ridingView = _R.nib._RidingView()
    /// Nib `VehicleInfoView`.
    static let vehicleInfoView = _R.nib._VehicleInfoView()
    /// Nib `VehicleReservedInfoView`.
    static let vehicleReservedInfoView = _R.nib._VehicleReservedInfoView()
    
    /// `UINib(name: "DialogViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.dialogViewController) instead")
    static func dialogViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.dialogViewController)
    }
    
    /// `UINib(name: "RidingView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ridingView) instead")
    static func ridingView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ridingView)
    }
    
    /// `UINib(name: "VehicleInfoView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.vehicleInfoView) instead")
    static func vehicleInfoView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.vehicleInfoView)
    }
    
    /// `UINib(name: "VehicleReservedInfoView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.vehicleReservedInfoView) instead")
    static func vehicleReservedInfoView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.vehicleReservedInfoView)
    }
    
    static func dialogViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.dialogViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func ridingView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.ridingView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func vehicleInfoView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.vehicleInfoView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func vehicleReservedInfoView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.vehicleReservedInfoView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `HistoryRideCell`.
    static let historyRideCell: Rswift.ReuseIdentifier<HistoryRideCell> = Rswift.ReuseIdentifier(identifier: "HistoryRideCell")
    /// Reuse identifier `PaymentCell`.
    static let paymentCell: Rswift.ReuseIdentifier<PaymentCell> = Rswift.ReuseIdentifier(identifier: "PaymentCell")
    /// Reuse identifier `TransactionCell`.
    static let transactionCell: Rswift.ReuseIdentifier<TransactionCell> = Rswift.ReuseIdentifier(identifier: "TransactionCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 21 view controllers.
  struct segue {
    /// This struct is generated for `EditEmailViewController`, and contains static references to 1 segues.
    struct editEmailViewController {
      /// Segue identifier `unwindToSettings`.
      static let unwindToSettings: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, EditEmailViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "unwindToSettings")
      
      /// Optionally returns a typed version of segue `unwindToSettings`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func unwindToSettings(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, EditEmailViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.editEmailViewController.unwindToSettings, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `EditNameViewController`, and contains static references to 1 segues.
    struct editNameViewController {
      /// Segue identifier `unwindToSettings`.
      static let unwindToSettings: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, EditNameViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "unwindToSettings")
      
      /// Optionally returns a typed version of segue `unwindToSettings`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func unwindToSettings(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, EditNameViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.editNameViewController.unwindToSettings, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `EditPhoneViewController`, and contains static references to 1 segues.
    struct editPhoneViewController {
      /// Segue identifier `showVerifyCode`.
      static let showVerifyCode: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, EditPhoneViewController, VerifyCodeViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showVerifyCode")
      
      /// Optionally returns a typed version of segue `showVerifyCode`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showVerifyCode(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, EditPhoneViewController, VerifyCodeViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.editPhoneViewController.showVerifyCode, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `EmailAuthViewController`, and contains static references to 5 segues.
    struct emailAuthViewController {
      /// Segue identifier `fromLogInToHome`.
      static let fromLogInToHome: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, EmailAuthViewController, MapViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromLogInToHome")
      /// Segue identifier `fromLogInToOnboard`.
      static let fromLogInToOnboard: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, EmailAuthViewController, EnableLocationViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromLogInToOnboard")
      /// Segue identifier `fromSignUpToHome`.
      static let fromSignUpToHome: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, EmailAuthViewController, MapViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromSignUpToHome")
      /// Segue identifier `fromSignUpToOnboard`.
      static let fromSignUpToOnboard: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, EmailAuthViewController, EnableLocationViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fromSignUpToOnboard")
      /// Segue identifier `showLogIn`.
      static let showLogIn: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, EmailAuthViewController, EmailAuthViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showLogIn")
      
      /// Optionally returns a typed version of segue `fromLogInToHome`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromLogInToHome(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, EmailAuthViewController, MapViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.emailAuthViewController.fromLogInToHome, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `fromLogInToOnboard`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromLogInToOnboard(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, EmailAuthViewController, EnableLocationViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.emailAuthViewController.fromLogInToOnboard, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `fromSignUpToHome`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromSignUpToHome(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, EmailAuthViewController, MapViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.emailAuthViewController.fromSignUpToHome, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `fromSignUpToOnboard`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromSignUpToOnboard(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, EmailAuthViewController, EnableLocationViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.emailAuthViewController.fromSignUpToOnboard, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showLogIn`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showLogIn(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, EmailAuthViewController, EmailAuthViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.emailAuthViewController.showLogIn, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `EnableLocationViewController`, and contains static references to 2 segues.
    struct enableLocationViewController {
      /// Segue identifier `showEnableNotification`.
      static let showEnableNotification: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, EnableLocationViewController, EnableNotificationViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showEnableNotification")
      /// Segue identifier `showHome`.
      static let showHome: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, EnableLocationViewController, MapViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showHome")
      
      /// Optionally returns a typed version of segue `showEnableNotification`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showEnableNotification(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, EnableLocationViewController, EnableNotificationViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.enableLocationViewController.showEnableNotification, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showHome`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showHome(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, EnableLocationViewController, MapViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.enableLocationViewController.showHome, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `EnableNotificationViewController`, and contains static references to 1 segues.
    struct enableNotificationViewController {
      /// Segue identifier `showHome`.
      static let showHome: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, EnableNotificationViewController, MapViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showHome")
      
      /// Optionally returns a typed version of segue `showHome`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showHome(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, EnableNotificationViewController, MapViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.enableNotificationViewController.showHome, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `EndRidePhotoViewController`, and contains static references to 1 segues.
    struct endRidePhotoViewController {
      /// Segue identifier `unwindToHome`.
      static let unwindToHome: Rswift.StoryboardSegueIdentifier<UIStoryboardSegueWithCompletion, EndRidePhotoViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "unwindToHome")
      
      /// Optionally returns a typed version of segue `unwindToHome`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func unwindToHome(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIStoryboardSegueWithCompletion, EndRidePhotoViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.endRidePhotoViewController.unwindToHome, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `HistoryRidesTableViewController`, and contains static references to 1 segues.
    struct historyRidesTableViewController {
      /// Segue identifier `showRideSummary`.
      static let showRideSummary: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HistoryRidesTableViewController, RideFinishedViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showRideSummary")
      
      /// Optionally returns a typed version of segue `showRideSummary`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showRideSummary(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HistoryRidesTableViewController, RideFinishedViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.historyRidesTableViewController.showRideSummary, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `ManualUnlockViewController`, and contains static references to 2 segues.
    struct manualUnlockViewController {
      /// Segue identifier `unwindToHome`.
      static let unwindToHome: Rswift.StoryboardSegueIdentifier<UIStoryboardSegueWithCompletion, ManualUnlockViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "unwindToHome")
      /// Segue identifier `unwindToScanUnlock`.
      static let unwindToScanUnlock: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ManualUnlockViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "unwindToScanUnlock")
      
      /// Optionally returns a typed version of segue `unwindToHome`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func unwindToHome(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIStoryboardSegueWithCompletion, ManualUnlockViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.manualUnlockViewController.unwindToHome, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `unwindToScanUnlock`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func unwindToScanUnlock(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ManualUnlockViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.manualUnlockViewController.unwindToScanUnlock, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MapViewController`, and contains static references to 9 segues.
    struct mapViewController {
      /// Segue identifier `showAccount`.
      static let showAccount: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MapViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "showAccount")
      /// Segue identifier `showEndRidePhoto`.
      static let showEndRidePhoto: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MapViewController, EndRidePhotoViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showEndRidePhoto")
      /// Segue identifier `showHelp`.
      static let showHelp: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MapViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "showHelp")
      /// Segue identifier `showHistory`.
      static let showHistory: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MapViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "showHistory")
      /// Segue identifier `showHowToRide`.
      static let showHowToRide: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MapViewController, HowToRideViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showHowToRide")
      /// Segue identifier `showRideFinished`.
      static let showRideFinished: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MapViewController, RideFinishedViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showRideFinished")
      /// Segue identifier `showRidePaused`.
      static let showRidePaused: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MapViewController, RidePausedViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showRidePaused")
      /// Segue identifier `showScanUnlock`.
      static let showScanUnlock: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MapViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "showScanUnlock")
      /// Segue identifier `showSettings`.
      static let showSettings: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MapViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "showSettings")
      
      /// Optionally returns a typed version of segue `showAccount`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showAccount(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MapViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mapViewController.showAccount, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showEndRidePhoto`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showEndRidePhoto(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MapViewController, EndRidePhotoViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mapViewController.showEndRidePhoto, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showHelp`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showHelp(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MapViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mapViewController.showHelp, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showHistory`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showHistory(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MapViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mapViewController.showHistory, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showHowToRide`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showHowToRide(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MapViewController, HowToRideViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mapViewController.showHowToRide, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showRideFinished`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showRideFinished(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MapViewController, RideFinishedViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mapViewController.showRideFinished, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showRidePaused`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showRidePaused(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MapViewController, RidePausedViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mapViewController.showRidePaused, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showScanUnlock`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showScanUnlock(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MapViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mapViewController.showScanUnlock, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showSettings`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showSettings(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MapViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mapViewController.showSettings, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `ResetPasswordRequestViewController`, and contains static references to 1 segues.
    struct resetPasswordRequestViewController {
      /// Segue identifier `showVerifyCode`.
      static let showVerifyCode: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ResetPasswordRequestViewController, ResetPasswordVerifyViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showVerifyCode")
      
      /// Optionally returns a typed version of segue `showVerifyCode`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showVerifyCode(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ResetPasswordRequestViewController, ResetPasswordVerifyViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.resetPasswordRequestViewController.showVerifyCode, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `ResetPasswordSetViewController`, and contains static references to 1 segues.
    struct resetPasswordSetViewController {
      /// Segue identifier `unwindToEmailAuth`.
      static let unwindToEmailAuth: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ResetPasswordSetViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "unwindToEmailAuth")
      
      /// Optionally returns a typed version of segue `unwindToEmailAuth`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func unwindToEmailAuth(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ResetPasswordSetViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.resetPasswordSetViewController.unwindToEmailAuth, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `ResetPasswordVerifyViewController`, and contains static references to 1 segues.
    struct resetPasswordVerifyViewController {
      /// Segue identifier `showNewPassword`.
      static let showNewPassword: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ResetPasswordVerifyViewController, ResetPasswordSetViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showNewPassword")
      
      /// Optionally returns a typed version of segue `showNewPassword`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showNewPassword(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ResetPasswordVerifyViewController, ResetPasswordSetViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.resetPasswordVerifyViewController.showNewPassword, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `RideFinishedViewController`, and contains static references to 1 segues.
    struct rideFinishedViewController {
      /// Segue identifier `unwindToHome`.
      static let unwindToHome: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, RideFinishedViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "unwindToHome")
      
      /// Optionally returns a typed version of segue `unwindToHome`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func unwindToHome(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, RideFinishedViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.rideFinishedViewController.unwindToHome, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `RidePausedViewController`, and contains static references to 1 segues.
    struct ridePausedViewController {
      /// Segue identifier `unwindToHome`.
      static let unwindToHome: Rswift.StoryboardSegueIdentifier<UIStoryboardSegueWithCompletion, RidePausedViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "unwindToHome")
      
      /// Optionally returns a typed version of segue `unwindToHome`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func unwindToHome(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIStoryboardSegueWithCompletion, RidePausedViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.ridePausedViewController.unwindToHome, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `ScanUnlockViewController`, and contains static references to 1 segues.
    struct scanUnlockViewController {
      /// Segue identifier `unwindToHome`.
      static let unwindToHome: Rswift.StoryboardSegueIdentifier<UIStoryboardSegueWithCompletion, ScanUnlockViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "unwindToHome")
      
      /// Optionally returns a typed version of segue `unwindToHome`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func unwindToHome(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIStoryboardSegueWithCompletion, ScanUnlockViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.scanUnlockViewController.unwindToHome, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SideMenuViewController`, and contains static references to 1 segues.
    struct sideMenuViewController {
      /// Segue identifier `unwindToHome`.
      static let unwindToHome: Rswift.StoryboardSegueIdentifier<UIStoryboardSegueWithCompletion, SideMenuViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "unwindToHome")
      
      /// Optionally returns a typed version of segue `unwindToHome`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func unwindToHome(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIStoryboardSegueWithCompletion, SideMenuViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.sideMenuViewController.unwindToHome, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SignInEmailViewController`, and contains static references to 1 segues.
    struct signInEmailViewController {
      /// Segue identifier `showEnterPassword`.
      static let showEnterPassword: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SignInEmailViewController, SignInPasswordViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showEnterPassword")
      
      /// Optionally returns a typed version of segue `showEnterPassword`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showEnterPassword(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SignInEmailViewController, SignInPasswordViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.signInEmailViewController.showEnterPassword, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SignInViewController`, and contains static references to 3 segues.
    struct signInViewController {
      /// Segue identifier `showHome`.
      static let showHome: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SignInViewController, MapViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showHome")
      /// Segue identifier `showOnboard`.
      static let showOnboard: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SignInViewController, EnableLocationViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showOnboard")
      /// Segue identifier `showVerifyCode`.
      static let showVerifyCode: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SignInViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "showVerifyCode")
      
      /// Optionally returns a typed version of segue `showHome`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showHome(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SignInViewController, MapViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.signInViewController.showHome, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showOnboard`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showOnboard(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SignInViewController, EnableLocationViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.signInViewController.showOnboard, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showVerifyCode`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showVerifyCode(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SignInViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.signInViewController.showVerifyCode, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `TopUpViewController`, and contains static references to 1 segues.
    struct topUpViewController {
      /// Segue identifier `unwindToAccount`.
      static let unwindToAccount: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TopUpViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "unwindToAccount")
      
      /// Optionally returns a typed version of segue `unwindToAccount`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func unwindToAccount(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TopUpViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.topUpViewController.unwindToAccount, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `VerifyCodeViewController`, and contains static references to 3 segues.
    struct verifyCodeViewController {
      /// Segue identifier `showHome`.
      static let showHome: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, VerifyCodeViewController, MapViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showHome")
      /// Segue identifier `showOnboard`.
      static let showOnboard: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, VerifyCodeViewController, EnableLocationViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showOnboard")
      /// Segue identifier `unwindToSettings`.
      static let unwindToSettings: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, VerifyCodeViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "unwindToSettings")
      
      /// Optionally returns a typed version of segue `showHome`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showHome(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, VerifyCodeViewController, MapViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.verifyCodeViewController.showHome, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showOnboard`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showOnboard(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, VerifyCodeViewController, EnableLocationViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.verifyCodeViewController.showOnboard, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `unwindToSettings`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func unwindToSettings(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, VerifyCodeViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.verifyCodeViewController.unwindToSettings, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 16 storyboards.
  struct storyboard {
    /// Storyboard `Account`.
    static let account = _R.storyboard.account()
    /// Storyboard `EmailSignIn`.
    static let emailSignIn = _R.storyboard.emailSignIn()
    /// Storyboard `EndRidePhoto`.
    static let endRidePhoto = _R.storyboard.endRidePhoto()
    /// Storyboard `Help`.
    static let help = _R.storyboard.help()
    /// Storyboard `History`.
    static let history = _R.storyboard.history()
    /// Storyboard `HowToRide`.
    static let howToRide = _R.storyboard.howToRide()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `ManualUnlock`.
    static let manualUnlock = _R.storyboard.manualUnlock()
    /// Storyboard `Onboard`.
    static let onboard = _R.storyboard.onboard()
    /// Storyboard `RideFinished`.
    static let rideFinished = _R.storyboard.rideFinished()
    /// Storyboard `RidePaused`.
    static let ridePaused = _R.storyboard.ridePaused()
    /// Storyboard `ScanUnlock`.
    static let scanUnlock = _R.storyboard.scanUnlock()
    /// Storyboard `Settings`.
    static let settings = _R.storyboard.settings()
    /// Storyboard `SideMenu`.
    static let sideMenu = _R.storyboard.sideMenu()
    /// Storyboard `SignIn`.
    static let signIn = _R.storyboard.signIn()
    
    /// `UIStoryboard(name: "Account", bundle: ...)`
    static func account(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.account)
    }
    
    /// `UIStoryboard(name: "EmailSignIn", bundle: ...)`
    static func emailSignIn(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.emailSignIn)
    }
    
    /// `UIStoryboard(name: "EndRidePhoto", bundle: ...)`
    static func endRidePhoto(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.endRidePhoto)
    }
    
    /// `UIStoryboard(name: "Help", bundle: ...)`
    static func help(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.help)
    }
    
    /// `UIStoryboard(name: "History", bundle: ...)`
    static func history(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.history)
    }
    
    /// `UIStoryboard(name: "HowToRide", bundle: ...)`
    static func howToRide(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.howToRide)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "ManualUnlock", bundle: ...)`
    static func manualUnlock(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.manualUnlock)
    }
    
    /// `UIStoryboard(name: "Onboard", bundle: ...)`
    static func onboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.onboard)
    }
    
    /// `UIStoryboard(name: "RideFinished", bundle: ...)`
    static func rideFinished(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.rideFinished)
    }
    
    /// `UIStoryboard(name: "RidePaused", bundle: ...)`
    static func ridePaused(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.ridePaused)
    }
    
    /// `UIStoryboard(name: "ScanUnlock", bundle: ...)`
    static func scanUnlock(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.scanUnlock)
    }
    
    /// `UIStoryboard(name: "Settings", bundle: ...)`
    static func settings(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settings)
    }
    
    /// `UIStoryboard(name: "SideMenu", bundle: ...)`
    static func sideMenu(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.sideMenu)
    }
    
    /// `UIStoryboard(name: "SignIn", bundle: ...)`
    static func signIn(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.signIn)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 8 localization keys.
    struct localizable {
      /// Base translation: Enter the 4-digit code sent to your phone
      /// 
      /// Locales: Base
      static let kEnterVerificationCode = Rswift.StringResource(key: "kEnterVerificationCode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: FUUTR Pty Ltd
      /// 
      /// Locales: Base
      static let kCompanyName = Rswift.StringResource(key: "kCompanyName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: No Internet connection
      /// 
      /// Locales: Base
      static let kNoInternetConnection = Rswift.StringResource(key: "kNoInternetConnection", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Okay
      /// 
      /// Locales: Base
      static let kErrorConfirm = Rswift.StringResource(key: "kErrorConfirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Sending verification code ...
      /// 
      /// Locales: Base
      static let kSendingVerificationCode = Rswift.StringResource(key: "kSendingVerificationCode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Something went wrong
      /// 
      /// Locales: Base
      static let kOtherError = Rswift.StringResource(key: "kOtherError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Verifying ...
      /// 
      /// Locales: Base
      static let kVerifying = Rswift.StringResource(key: "kVerifying", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: We'll send a text to verify your number
      /// 
      /// Locales: Base
      static let kPhoneNumberVerificationPrompt = Rswift.StringResource(key: "kPhoneNumberVerificationPrompt", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      
      /// Base translation: Enter the 4-digit code sent to your phone
      /// 
      /// Locales: Base
      static func kEnterVerificationCode(_: Void = ()) -> String {
        return NSLocalizedString("kEnterVerificationCode", bundle: R.hostingBundle, value: "Enter the 4-digit code sent to your phone", comment: "")
      }
      
      /// Base translation: FUUTR Pty Ltd
      /// 
      /// Locales: Base
      static func kCompanyName(_: Void = ()) -> String {
        return NSLocalizedString("kCompanyName", bundle: R.hostingBundle, value: "FUUTR Pty Ltd", comment: "")
      }
      
      /// Base translation: No Internet connection
      /// 
      /// Locales: Base
      static func kNoInternetConnection(_: Void = ()) -> String {
        return NSLocalizedString("kNoInternetConnection", bundle: R.hostingBundle, value: "No Internet connection", comment: "")
      }
      
      /// Base translation: Okay
      /// 
      /// Locales: Base
      static func kErrorConfirm(_: Void = ()) -> String {
        return NSLocalizedString("kErrorConfirm", bundle: R.hostingBundle, value: "Okay", comment: "")
      }
      
      /// Base translation: Sending verification code ...
      /// 
      /// Locales: Base
      static func kSendingVerificationCode(_: Void = ()) -> String {
        return NSLocalizedString("kSendingVerificationCode", bundle: R.hostingBundle, value: "Sending verification code ...", comment: "")
      }
      
      /// Base translation: Something went wrong
      /// 
      /// Locales: Base
      static func kOtherError(_: Void = ()) -> String {
        return NSLocalizedString("kOtherError", bundle: R.hostingBundle, value: "Something went wrong", comment: "")
      }
      
      /// Base translation: Verifying ...
      /// 
      /// Locales: Base
      static func kVerifying(_: Void = ()) -> String {
        return NSLocalizedString("kVerifying", bundle: R.hostingBundle, value: "Verifying ...", comment: "")
      }
      
      /// Base translation: We'll send a text to verify your number
      /// 
      /// Locales: Base
      static func kPhoneNumberVerificationPrompt(_: Void = ()) -> String {
        return NSLocalizedString("kPhoneNumberVerificationPrompt", bundle: R.hostingBundle, value: "We'll send a text to verify your number", comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _RidingView.validate()
      try _VehicleInfoView.validate()
      try _VehicleReservedInfoView.validate()
    }
    
    struct _DialogViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DialogViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _RidingView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "RidingView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic-clock-dark-gray-24", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-clock-dark-gray-24' is used in nib 'RidingView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-location-dark-gray-24", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-location-dark-gray-24' is used in nib 'RidingView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "scooter-model", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'scooter-model' is used in nib 'RidingView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _VehicleInfoView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "VehicleInfoView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic-battery-empty-dark-gray-24", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-battery-empty-dark-gray-24' is used in nib 'VehicleInfoView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-close-dark-gray-16", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-close-dark-gray-16' is used in nib 'VehicleInfoView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-dollar-dark-gray-24", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-dollar-dark-gray-24' is used in nib 'VehicleInfoView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-location-dark-gray-24", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-location-dark-gray-24' is used in nib 'VehicleInfoView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "scooter-model", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'scooter-model' is used in nib 'VehicleInfoView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _VehicleReservedInfoView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "VehicleReservedInfoView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "scooter-model", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'scooter-model' is used in nib 'VehicleReservedInfoView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try account.validate()
      try emailSignIn.validate()
      try endRidePhoto.validate()
      try help.validate()
      try history.validate()
      try howToRide.validate()
      try launchScreen.validate()
      try main.validate()
      try manualUnlock.validate()
      try onboard.validate()
      try rideFinished.validate()
      try ridePaused.validate()
      try scanUnlock.validate()
      try settings.validate()
      try sideMenu.validate()
      try signIn.validate()
    }
    
    struct account: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Account"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct emailSignIn: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "EmailSignIn"
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn-arrow-next-red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn-arrow-next-red' is used in storyboard 'EmailSignIn', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-back-dark-gray-16", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-back-dark-gray-16' is used in storyboard 'EmailSignIn', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct endRidePhoto: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = EndRidePhotoViewController
      
      let bundle = R.hostingBundle
      let name = "EndRidePhoto"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct help: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Help"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct history: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "History"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct howToRide: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = HowToRideViewController
      
      let bundle = R.hostingBundle
      let howToRide = StoryboardViewControllerResource<HowToRideViewController>(identifier: "HowToRide")
      let howToRideSinglePageViewController = StoryboardViewControllerResource<HowToRideSinglePageViewController>(identifier: "HowToRideSinglePageViewController")
      let name = "HowToRide"
      
      func howToRide(_: Void = ()) -> HowToRideViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: howToRide)
      }
      
      func howToRideSinglePageViewController(_: Void = ()) -> HowToRideSinglePageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: howToRideSinglePageViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn-arrow-next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn-arrow-next' is used in storyboard 'HowToRide', but couldn't be loaded.") }
        if UIKit.UIImage(named: "how-to-ride-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'how-to-ride-1' is used in storyboard 'HowToRide', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.howToRide().howToRide() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'howToRide' could not be loaded from storyboard 'HowToRide' as 'HowToRideViewController'.") }
        if _R.storyboard.howToRide().howToRideSinglePageViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'howToRideSinglePageViewController' could not be loaded from storyboard 'HowToRide' as 'HowToRideSinglePageViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "Launch", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Launch' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MapViewController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if UIKit.UIImage(named: "boy-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'boy-1' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct manualUnlock: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ManualUnlockViewController
      
      let bundle = R.hostingBundle
      let mannualUnlock = StoryboardViewControllerResource<ManualUnlockViewController>(identifier: "MannualUnlock")
      let name = "ManualUnlock"
      
      func mannualUnlock(_: Void = ()) -> ManualUnlockViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mannualUnlock)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic-close-dark-gray-16", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-close-dark-gray-16' is used in storyboard 'ManualUnlock', but couldn't be loaded.") }
        if UIKit.UIImage(named: "scooter-enter-code", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'scooter-enter-code' is used in storyboard 'ManualUnlock', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.manualUnlock().mannualUnlock() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mannualUnlock' could not be loaded from storyboard 'ManualUnlock' as 'ManualUnlockViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct onboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = EnableLocationViewController
      
      let bundle = R.hostingBundle
      let name = "Onboard"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct rideFinished: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = RideFinishedViewController
      
      let bundle = R.hostingBundle
      let name = "RideFinished"
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic-clock-dark-gray-24", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-clock-dark-gray-24' is used in storyboard 'RideFinished', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-dollar-dark-gray-24", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-dollar-dark-gray-24' is used in storyboard 'RideFinished', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-location-dark-gray-24", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-location-dark-gray-24' is used in storyboard 'RideFinished', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-rating-empty-red-32", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-rating-empty-red-32' is used in storyboard 'RideFinished', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-rating-red-32", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-rating-red-32' is used in storyboard 'RideFinished', but couldn't be loaded.") }
        if UIKit.UIImage(named: "social-facebook-dark-gray-35", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'social-facebook-dark-gray-35' is used in storyboard 'RideFinished', but couldn't be loaded.") }
        if UIKit.UIImage(named: "social-instagram-dark-gray-35", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'social-instagram-dark-gray-35' is used in storyboard 'RideFinished', but couldn't be loaded.") }
        if UIKit.UIImage(named: "social-twitter-dark-gray-35", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'social-twitter-dark-gray-35' is used in storyboard 'RideFinished', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct ridePaused: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = RidePausedViewController
      
      let bundle = R.hostingBundle
      let name = "RidePaused"
      let rideLocked = StoryboardViewControllerResource<RidePausedViewController>(identifier: "RideLocked")
      
      func rideLocked(_: Void = ()) -> RidePausedViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: rideLocked)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic-clock-dark-gray-24", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-clock-dark-gray-24' is used in storyboard 'RidePaused', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-close-dark-gray-16", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-close-dark-gray-16' is used in storyboard 'RidePaused', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-location-dark-gray-24", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-location-dark-gray-24' is used in storyboard 'RidePaused', but couldn't be loaded.") }
        if UIKit.UIImage(named: "scooter-pin-locked-green", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'scooter-pin-locked-green' is used in storyboard 'RidePaused', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.ridePaused().rideLocked() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'rideLocked' could not be loaded from storyboard 'RidePaused' as 'RidePausedViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct scanUnlock: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "ScanUnlock"
      let scanUnlock = StoryboardViewControllerResource<ScanUnlockViewController>(identifier: "ScanUnlock")
      
      func scanUnlock(_: Void = ()) -> ScanUnlockViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: scanUnlock)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic-close-white-16", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-close-white-16' is used in storyboard 'ScanUnlock', but couldn't be loaded.") }
        if UIKit.UIImage(named: "scooter-qr-code", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'scooter-qr-code' is used in storyboard 'ScanUnlock', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.scanUnlock().scanUnlock() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'scanUnlock' could not be loaded from storyboard 'ScanUnlock' as 'ScanUnlockViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct settings: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Settings"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct sideMenu: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SideMenu.UISideMenuNavigationController
      
      let bundle = R.hostingBundle
      let name = "SideMenu"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct signIn: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SignInViewController
      
      let bundle = R.hostingBundle
      let name = "SignIn"
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic-mobile-dark-gray-16", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-mobile-dark-gray-16' is used in storyboard 'SignIn', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
